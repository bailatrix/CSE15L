# Homework 4 (Makefile)
# 
# Name: Tracker Wonderdog  
# PID: AXXXXXXXX  
# Account: cs15xzz  
# 
# Your impressive work at your internship has won you a return offer at the
# Galactic Empire. You were but the student; now you are the master! You are
# responsible for all Imperial Vehicles’s software reliability. The vehicle
# classes include:
# 
# * ATAT.java
# * ATST.java
# * DeathStar.java
# * ImperialShuttle.java
# * StarDestroyer.java
# * TIEBomber.java
# * TIEFighter.java
# 
# For each of these classes, there is a Tester class that contains all unit
# tests for the corresponding vehicle named `(Vehicle)Tester.java`, where
# (Vehicle) can be replaced by any of the vehicle class name. Write a  
# Makefile that does the following:
# 
# 1. When `make (Vehicle).class` is typed in, the corresponding vehicle class is
# built, only if its Java source file has been updated since the last time it was
# built.
# 2. When `make` or `make vehicles` is typed in, each vehicle class will be built
# (ATAT.class, ATST.class, etc.) if the corresponding Java source file has been
# updated since the last time that class was built.
# 3. When `make (Vehicle)Tester.class` is typed in, the corresponding tester
# class is built, if (Vehicle).java or (Vehicle)Tester.java has been updated
# since the last time the tester was built.
# 4. When `make tests` is typed in, all tester classes will be built
# (ATATTester.class, ATSTTester.class, etc.), if the corresponding Java source
# file for that tester or the tested vehicle has been updated since the last time
# the tester was built.  
# 5. When type in `make clean`, all class files will be removed.
# 
# ## HINTS:
# 
# 1. Declare variables for your classes to try and organize your code
# 2. Make sure you understand the relationship between targets and dependencies
# 3. When turning in your code, be sure it is _not commented out_. We should be
# able to run the Makefile with the tests above.
# 
# ## Remark
# There are multiple ways to do this assignment! Make sure to test. One common
# error is that students compile every file when they don’t necessarily have to.
# For example, if we only change DeathStar.java, and we enter “make vehicles,”
# then we should ONLY update DeathStar.class since DeathStar.class file is now
# the only file out of date. You should NOT be recompiling every single file.
# 
# # Refer to the lab for help!
#==============================================================================
#
# YOUR CODE STARTS BELOW
